// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: blockchain/v1/wallet.proto

package blockchainv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAddressResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAddressResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAddressResponseMultiError, or nil if none found.
func (m *GetAddressResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAddressResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Address

	if len(errors) > 0 {
		return GetAddressResponseMultiError(errors)
	}

	return nil
}

// GetAddressResponseMultiError is an error wrapping multiple validation errors
// returned by GetAddressResponse.ValidateAll() if the designated constraints
// aren't met.
type GetAddressResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAddressResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAddressResponseMultiError) AllErrors() []error { return m }

// GetAddressResponseValidationError is the validation error returned by
// GetAddressResponse.Validate if the designated constraints aren't met.
type GetAddressResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAddressResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAddressResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAddressResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAddressResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAddressResponseValidationError) ErrorName() string {
	return "GetAddressResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAddressResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAddressResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAddressResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAddressResponseValidationError{}

// Validate checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMetadataRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMetadataRequestMultiError, or nil if none found.
func (m *GetMetadataRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMetadataRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMetadataRequestMultiError(errors)
	}

	return nil
}

// GetMetadataRequestMultiError is an error wrapping multiple validation errors
// returned by GetMetadataRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMetadataRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMetadataRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMetadataRequestMultiError) AllErrors() []error { return m }

// GetMetadataRequestValidationError is the validation error returned by
// GetMetadataRequest.Validate if the designated constraints aren't met.
type GetMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMetadataRequestValidationError) ErrorName() string {
	return "GetMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMetadataRequestValidationError{}

// Validate checks the field values on GetSignatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSignatureRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignatureRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignatureRequestMultiError, or nil if none found.
func (m *GetSignatureRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignatureRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Message

	if len(errors) > 0 {
		return GetSignatureRequestMultiError(errors)
	}

	return nil
}

// GetSignatureRequestMultiError is an error wrapping multiple validation
// errors returned by GetSignatureRequest.ValidateAll() if the designated
// constraints aren't met.
type GetSignatureRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignatureRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignatureRequestMultiError) AllErrors() []error { return m }

// GetSignatureRequestValidationError is the validation error returned by
// GetSignatureRequest.Validate if the designated constraints aren't met.
type GetSignatureRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignatureRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignatureRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignatureRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignatureRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignatureRequestValidationError) ErrorName() string {
	return "GetSignatureRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignatureRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignatureRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignatureRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignatureRequestValidationError{}

// Validate checks the field values on GetSignatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSignatureResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSignatureResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSignatureResponseMultiError, or nil if none found.
func (m *GetSignatureResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSignatureResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Signature

	if len(errors) > 0 {
		return GetSignatureResponseMultiError(errors)
	}

	return nil
}

// GetSignatureResponseMultiError is an error wrapping multiple validation
// errors returned by GetSignatureResponse.ValidateAll() if the designated
// constraints aren't met.
type GetSignatureResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSignatureResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSignatureResponseMultiError) AllErrors() []error { return m }

// GetSignatureResponseValidationError is the validation error returned by
// GetSignatureResponse.Validate if the designated constraints aren't met.
type GetSignatureResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSignatureResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSignatureResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSignatureResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSignatureResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSignatureResponseValidationError) ErrorName() string {
	return "GetSignatureResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSignatureResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSignatureResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSignatureResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSignatureResponseValidationError{}

// Validate checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTransactionRequestMultiError, or nil if none found.
func (m *SendTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTransaction()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendTransactionRequestValidationError{
					field:  "Transaction",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTransaction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendTransactionRequestValidationError{
				field:  "Transaction",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendTransactionRequestMultiError(errors)
	}

	return nil
}

// SendTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by SendTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type SendTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTransactionRequestMultiError) AllErrors() []error { return m }

// SendTransactionRequestValidationError is the validation error returned by
// SendTransactionRequest.Validate if the designated constraints aren't met.
type SendTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionRequestValidationError) ErrorName() string {
	return "SendTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionRequestValidationError{}

// Validate checks the field values on SendTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SendTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendTransactionResponseMultiError, or nil if none found.
func (m *SendTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SendTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return SendTransactionResponseMultiError(errors)
	}

	return nil
}

// SendTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by SendTransactionResponse.ValidateAll() if the designated
// constraints aren't met.
type SendTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendTransactionResponseMultiError) AllErrors() []error { return m }

// SendTransactionResponseValidationError is the validation error returned by
// SendTransactionResponse.Validate if the designated constraints aren't met.
type SendTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendTransactionResponseValidationError) ErrorName() string {
	return "SendTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendTransactionResponseValidationError{}
